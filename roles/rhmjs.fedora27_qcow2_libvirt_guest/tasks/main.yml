- block:
  - name: Copy Fedora DVD
    copy: src="{{ fedora_repo_iso }}" dest="{{ hostvars[libvirt_host].libvirt_storage_directory }}"

  - name: Copy Fedora qcow2 base
    copy: src="{{ fedora_qcow2 }}" dest="{{ hostvars[libvirt_host].libvirt_storage_directory }}"

  - name: Create instance qcow2 image layer
    command: qemu-img create -f qcow2 -b "{{ fedora_qcow2 }}" {{ inventory_hostname }}.qcow2
    args:
      creates: "{{ hostvars[libvirt_host].libvirt_storage_directory }}/{{ inventory_hostname }}.qcow2"
      chdir: "{{ hostvars[libvirt_host].libvirt_storage_directory }}"

  - name: Create directory for cloud-init media preparation
    file: state="directory" path="{{ hostvars[libvirt_host].libvirt_storage_directory }}/{{ inventory_hostname }}.cloud-init.d"

  - name: Create cloud-init user-data
    template: dest="{{ hostvars[libvirt_host].libvirt_storage_directory }}/{{ inventory_hostname }}.cloud-init.d/user-data" src=user-data.j2
    register: user_data_reg

  - name: Create cloud-init meta-data
    template: dest="{{ hostvars[libvirt_host].libvirt_storage_directory }}/{{ inventory_hostname }}.cloud-init.d/meta-data" src=meta-data.j2
    register: meta_data_reg

  - name: Create cloud-init media
    command: mkisofs -output {{ hostvars[libvirt_host].libvirt_storage_directory }}/{{ inventory_hostname }}.cloud-init.iso -volid cidata -joliet -rock "{{ hostvars[libvirt_host].libvirt_storage_directory }}/{{ inventory_hostname }}.cloud-init.d/."
    when: user_data_reg.changed or meta_data_reg.changed

  - name: Fetch current VM list
    virt:
      uri: qemu:///system
      command: list_vms
    register: vmlist

  - name: ensure defined {{ inventory_hostname }} vm
    virt:
      name: "{{ inventory_hostname }}"
      uri: qemu:///system
      xml: '{{ lookup("template", "domain.xml.j2") }}'
      command: define

  - name: ensure running {{ inventory_hostname }} vms
    virt:
      name: "{{ inventory_hostname }}"
      uri: qemu:///system
      state: running

  - name: Checking for SSH on {{ hostvars[inventory_hostname].ansible_host | default(inventory_hostname) }}
    wait_for: port=22 host="{{ hostvars[inventory_hostname].ansible_host | default(inventory_hostname) }}" search_regex=OpenSSH

  delegate_to: "{{ hostvars[libvirt_host].ansible_host | default(libvirt_host) }}"

- name: Connect via SSH once to capture new host key
  command: ssh  -oStrictHostKeyChecking=no -oPasswordAuthentication=no {{ inventory_hostname }} echo hi
  delegate_to: localhost
  register: ssh_result
  failed_when: ssh_result.rc!=0 and ssh_result.rc!=255
